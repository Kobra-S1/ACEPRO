# Please check that [save_variables] is above [ace] if you're using different config
[save_variables]
filename: ~/printer_data/config/saved_variables.cfg

# Hack to get a on/off switch to be able to switch between ACEPro and external spool print
[virtual_pins]

[output_pin ACE_Pro]
pin: virtual_pin:ace_pro
pwm: False
value:1
shutdown_value:0

[respond]

[ace]
#ACE serial port is automatically detected if "serial:"" is not set.
#Uncomment only If you need to pass hardcoded serial port
#serial: /dev/ttyACM0
baud: 115200

#Enable filament runout detection (non-endless spool mode)
standard_filament_runout_detection: True
#filament_runout_sensor_name_rdm: filament_runout_rdm
#filament_runout_sensor_name_nozzle: filament_runout_nozzle

#Default state of feed-assits after ACE connect/re-connect.
#This controls if ACE automatical starts pushing out filament of the last active slot after startup,
#unless if detects resistance via the rear buffer-filament sensors and stops.
feed_assist_active_after_ace_connect: False

# Default feeding speed, 10-25 in stock
feed_speed: 60
# Default retraction speed, 10-25 in stock
retract_speed: 50

# Value must be greater then the tube length, as it will be an error and causes print to PAUSE if more then
#this ammount was feeded (and toolhead filament sensor has not triggered).
total_max_feeding_length:3000

#Tube length between filament detection sensor on toolhead and ACE Filament parking position (where filaments is feeded automatical by ACE if new Role is inserted).
#So distance how much filament needs to be retracted in total to free the filament path for other filament to be feed.
#Should be slightly greater then real tube length.
parkposition_to_toolhead_length:1000

#Length between return module filament sensor and safe parkposition before x-in-1 splitter
parkposition_to_rms_sensor_length: 150 #170
#The combination of both above values is used when filaments gets retracted from the toolhead.
#Filament ist retracted until RMS sensor retracts, but not more then max. toolhead length

# Length of the filament to slowly feed from toolheads filament sensor to the nozzle, so its primed to extrude.
# Sensor-> Cutter = 22mm
# Cutter-> Nozzle starts oozing old filament = +60mm
# Heatblock/Nozzle -> Starts oozing new filament = +20mm
toolhead_sensor_to_cutter: 22
toolhead_cutter_to_nozzle: 60
toolhead_nozzle_purge: 1

toolhead_fast_loading_speed: 15
toolhead_slow_loading_speed: 5

# Should be roughly the lenght between ACE and the printers 4in1 splitter.
toolchange_load_length: 3000 # Should be >= the lenght between ACE and the printers 4in1 splitter.

max_dryer_temperature: 55


extruder_feeding_length: 1 # While ACE feeds, extruder should grab the filament when it reaches the printhead, hence it engages at every feeding cycle a little bit to assure that
extruder_feeding_speed: 5 # Extruder feed speed, no need to hurry here.

extruder_retraction_length: -50    # How much to retract at the toolhead extruder, once at filament change, to pull out the cut filament out of extruder, so ACE is able to rectract the loaded filament
extruder_retraction_speed: 10       #Speed for above retraction

default_color_change_purge_length: 50
default_color_change_purge_speed: 400

# How much filament to feed incremental as 2nd try if initial loading failed (stops if total_max_feeding_length is reached)
incremental_feeding_length: 100 
incremental_feeding_speed: 60 


[ace 1]
#ACE serial port is automatically detected if "serial:"" is not set.
#Uncomment only If you need to pass hardcoded serial port
#serial: /dev/ttyACM0
baud: 115200

#Enable filament runout detection (non-endless spool mode)
standard_filament_runout_detection: True

#Default state of feed-assits after ACE connect/re-connect.
#This controls if ACE automatical starts pushing out filament of the last active slot after startup,
#unless if detects resistance via the rear buffer-filament sensors and stops.
feed_assist_active_after_ace_connect: False

# Default feeding speed, 10-25 in stock
feed_speed: 60
# Default retraction speed, 10-25 in stock
retract_speed: 50

# Value must be greater then the tube length, as it will be an error and causes print to PAUSE if more then
#this ammount was feeded (and toolhead filament sensor has not triggered).
total_max_feeding_length:3000

#Tube length between filament detection sensor on toolhead and ACE Filament parking position (where filaments is feeded automatical by ACE if new Role is inserted).
#So distance how much filament needs to be retracted in total to free the filament path for other filament to be feed.
#Should be slightly greater then real tube length.
parkposition_to_toolhead_length:1000

#Length between return module filament sensor and safe parkposition before x-in-1 splitter
parkposition_to_rms_sensor_length: 100 #170
#The combination of both above values is used when filaments gets retracted from the toolhead.
#Filament ist retracted until RMS sensor retracts, but not more then max. toolhead length

# Length of the filament to slowly feed from toolheads filament sensor to the nozzle, so its primed to extrude.
# Sensor-> Cutter = 22mm
# Cutter-> Nozzle starts oozing old filament = +60mm
# Heatblock/Nozzle -> Starts oozing new filament = +20mm
toolhead_sensor_to_cutter: 22
toolhead_cutter_to_nozzle: 60
toolhead_nozzle_purge: 1

toolhead_fast_loading_speed: 15
toolhead_slow_loading_speed: 5

# Should be roughly the lenght between ACE and the printers 4in1 splitter.
toolchange_load_length: 3000 # Should be >= the lenght between ACE and the printers 4in1 splitter.

max_dryer_temperature: 55


extruder_feeding_length: 1 # While ACE feeds, extruder should grab the filament when it reaches the printhead, hence it engages at every feeding cycle a little bit to assure that
extruder_feeding_speed: 5 # Extruder feed speed, no need to hurry here.

extruder_retraction_length: -50    # How much to retract at the toolhead extruder, once at filament change, to pull out the cut filament out of extruder, so ACE is able to rectract the loaded filament
extruder_retraction_speed: 10       #Speed for above retraction

default_color_change_purge_length: 50
default_color_change_purge_speed: 400

# How much filament to feed incremental as 2nd try if initial loading failed (stops if total_max_feeding_length is reached)
incremental_feeding_length: 100 
incremental_feeding_speed: 60 

[gcode_macro VEL_PUSH]
variable_stack: []
gcode:
  {% set cur = printer["gcode_macro VEL_PUSH"].stack %}
  {% set s = cur + [(printer.toolhead.max_accel,
                     (printer.toolhead.max_accel_to_decel|default(printer.toolhead.max_accel, true)),
                     printer.toolhead.max_velocity,
                     printer.toolhead.square_corner_velocity)] %}
  SET_GCODE_VARIABLE MACRO=VEL_PUSH VARIABLE=stack VALUE="{s|tojson}"

[gcode_macro VEL_POP]
gcode:
  {% set cur = printer["gcode_macro VEL_PUSH"].stack %}
  {% if cur|length == 0 %}
    {action_respond_info("VEL_POP: stack empty, nothing to restore")}
  {% else %}
    {% set a, atd, v, scv = cur[-1] %}
    SET_VELOCITY_LIMIT ACCEL={a} ACCEL_TO_DECEL={atd} VELOCITY={v} SQUARE_CORNER_VELOCITY={scv}
    {% set s = cur[:-1] %}
    SET_GCODE_VARIABLE MACRO=VEL_PUSH VARIABLE=stack VALUE="{s|tojson}"
  {% endif %}

[gcode_macro CUT_TIP]
description: Cut filament tip at the front-right cutter (Y jab, soft-limit safe)
# --- Tunables ---
variable_x_impact: 263.0        # cutter X
variable_y_impact: 16.0         # cutter Y (near front)
variable_cruise: 200.0          # mm/s (return)
variable_impact: 8.0            # mm/s (push)
variable_y_stroke: 14.0         # mm to push toward front
variable_repeats: 1
variable_dwell_ms: 80
variable_retract: 50.0
variable_park_x: 47.0
variable_park_y: 250.0
variable_throw_x: 47.0
variable_throw_y: 276.0
variable_speed: 12000
# +NEW: set to -1 if front is Y-min; set to +1 if front is Y-max
variable_y_dir: -1

gcode:
    RESPOND TYPE=echo MSG="CUT_TIP start"
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

    SAVE_GCODE_STATE NAME=ks1_cut_state

    # Geometry & safety
    {% set safety = 0.5 %}
    {% set y_min = printer.toolhead.axis_minimum.y|float %}
    {% set y_max = printer.toolhead.axis_maximum.y|float %}
    {% set y_dir = printer["gcode_macro CUT_TIP"].y_dir|int %}
    {% if y_dir not in [-1,1] %}{% set y_dir = -1 %}{% endif %}

    # Choose a safe start Y so the jab (y_dir * y_stroke) stays in-bounds
    {% if y_dir == -1 %}
        # Front at low Y → we will move toward smaller Y during the jab
        {% set min_start = y_stroke + safety %}
        {% set start_y = (y_impact if y_impact > min_start else min_start) %}
    {% else %}
        # Front at high Y → we will move toward larger Y during the jab
        {% set max_start = y_max - (y_stroke + safety) %}
        {% set clamped = (y_impact if y_impact < max_start else max_start) %}
        {% set start_y = (clamped if clamped > y_min else y_min + safety) %}
    {% endif %}

    # Move to cutter
    G90
    G1 X{ x_impact } Y{ start_y } F{ cruise*60 }
    M400

    G91
    {% for i in range(repeats|int) %}
        # Jab toward the cutter (front)
        G1 Y{ y_dir * y_stroke } F{ impact*60 }
        M400

        # Dwell at impact
        G4 P{ dwell_ms }
    {% endfor %}
    G90
    M400

    RESPOND TYPE=echo MSG="CUT DONE"

    # Staging moves
    G1 Y{park_y} F{speed}
    G1 X{park_x} F{speed}
    TO_THROW_POSITION

    # Restore modes/feeds (not position)
    RESTORE_GCODE_STATE NAME=ks1_cut_state MOVE=0 MOVE_SPEED=200

    
[gcode_macro _ACE_PRE_TOOLCHANGE]
description: Pre-toolchange prep with pause-safe heating logic
variable_fallback_purge_temp_min: 240
gcode:
  {% if printer["output_pin ACE_Pro"].value %}
    { action_respond_info("Doing Pre toolchange") }
    SAVE_GCODE_STATE NAME=TOOLCHANGE

    # --- Ensure homed before we move ---
    {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    # --- Safe Z hop (no target changes during hop restore) ---
    SAVE_GCODE_STATE NAME=ACE_PRE_LOCAL
    G90
    {% set curz  = printer.toolhead.position.z|float %}
    {% set zmax  = printer.toolhead.axis_maximum.z|float %}
    {% set hop   = 3.0 %}
    {% set margin = 0.2 %}
    {% set target_z = (curz + hop) if (curz + hop) < (zmax - margin) else (zmax - margin) %}
    {% if target_z > curz %}
      G1 Z{ target_z|float|round(3) } F100
      M400
    {% endif %}
    RESTORE_GCODE_STATE NAME=ACE_PRE_LOCAL MOVE=0

    # --- Capture current slicer target BEFORE touching it ---
    {% set orig = printer.extruder.target|int %}
    SET_GCODE_VARIABLE MACRO=_ACE_STATE VARIABLE=orig_target VALUE={orig}

    # --- Gather ACE inventory temps (with safe defaults) ---
    {% set inv  = printer["gcode_macro _ACE_STATE"].heating_temperature|default(0)|int %}
    {% set prev = printer["gcode_macro _ACE_STATE"].prev_tool_heating_temperature|default(0)|int %}
    {% set ace_min = prev if prev > inv else inv %}

    # --- Decide desired purge/min temp (priority: slicer > ACE > fallback) ---
    {% set fallback = params.FALLBACK|default(fallback_purge_temp_min)|int %}
    {% if orig > 0 %}
      {% set desired = orig %}
      { action_respond_info("_ACE_PRE_TOOLCHANGE: Using slicer target %s°C" % desired) }
    {% elif ace_min > 0 %}
      {% set desired = ace_min %}
      { action_respond_info("_ACE_PRE_TOOLCHANGE: Using ACE inventory temp %s°C (prev=%s, inv=%s)" % (desired, prev, inv)) }
    {% else %}
      {% set desired = fallback %}
      { action_respond_info("_ACE_PRE_TOOLCHANGE: No valid ACE temp; using fallback %s°C" % desired) }
    {% endif %}

    # --- Mark if we're bumping above the original slicer target ---
    {% set bumped = 1 if orig < desired else 0 %}
    SET_GCODE_VARIABLE MACRO=_ACE_STATE VARIABLE=bumped VALUE={bumped}

    # --- Job state handling: treat paused/resuming like printing ---
    {% set ps = printer.print_stats.state %}
    {% set is_active_job = ps in ["printing", "paused", "resuming"] %}

    {% if not is_active_job %}
      { action_respond_info("_ACE_PRE_TOOLCHANGE: Not in active job (%s)" % ps) }
      VEL_PUSH
      SET_VELOCITY_LIMIT ACCEL=20000 ACCEL_TO_DECEL=5000 VELOCITY=300
      {% if printer.extruder.temperature < desired %}
        {% if bumped %}
          { action_respond_info("_ACE_PRE_TOOLCHANGE: Setting bumped nozzle temp to %s°C" % desired) }
          M109 S{desired}
        {% else %}
          { action_respond_info("_ACE_PRE_TOOLCHANGE: Waiting for nozzle to reach %s°C" % desired) }
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={desired}
        {% endif %}
      {% else %}
        { action_respond_info("_ACE_PRE_TOOLCHANGE: Nozzle already above %s°C; no wait" % desired) }
      {% endif %}
      VEL_POP
    {% else %}
      { action_respond_info("_ACE_PRE_TOOLCHANGE: Active job (%s); not changing target, just ensure >= %s°C" % (ps, desired)) }
      {% if printer.extruder.temperature < desired %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={desired}
      {% else %}
        { action_respond_info("_ACE_PRE_TOOLCHANGE: Nozzle already above %s°C; no wait" % desired) }
      {% endif %}
    {% endif %}
  {% else %}
    { action_respond_info("WARNING: ACE is disabled, but Pre-Toolchange macro was called!") }
  {% endif %}

[gcode_macro _ACE_POST_TOOLCHANGE]
description: Post-toolchange procedure with optional purge/wipe
gcode:
  {% if printer["output_pin ACE_Pro"].value %}
      {action_respond_info("Doing Post toolchange")}
      VEL_PUSH
      SET_VELOCITY_LIMIT ACCEL=20000 ACCEL_TO_DECEL=5000 VELOCITY=300
      TO_THROW_POSITION
  
      RESPOND TYPE=echo MSG="Prime nozzle"
  
      # --- Configurable purge ---
      {% set purge = params.PURGELENGTH|default(50)|float %}   ; mm of filament
      {% set speed = params.PURGESPEED|default(400)|float %}  ; mm/min feedrate
  
      SAVE_GCODE_STATE NAME=purge_state
      M83
      G92 E0
  
      {% if purge > 0 %}
        { action_respond_info("_ACE_POST_TOOLCHANGE: Purging %f mm" % purge) }
        G1 E{purge} F{speed}
      {% endif %}
  
      G92 E0
      RESTORE_GCODE_STATE NAME=purge_state MOVE=0
  
      {% set st = printer["gcode_macro _ACE_STATE"] %}
      {% if st.startup_toolchange|default(0)|int == 1 %}
        # Skip purge/wipe for startup toolchange
        SET_GCODE_VARIABLE MACRO=_ACE_STATE VARIABLE=startup_toolchange VALUE=0
        {action_respond_info("Skipping purge/wipe for startup toolchange")}
      {% else %}
        RESPOND TYPE=echo MSG="Wipe nozzle after purge"
        TO_FRONT_OF_THROW_BLADE
        TO_BACK_OF_THROW_BLADE
        TO_FRONT_OF_THROW_BLADE
        TO_BACK_OF_THROW_BLADE
        TO_THROW_POSITION
        TO_FRONT_OF_THROW_BLADE
        TO_BACK_OF_THROW_BLADE
  
        WIPE_ENTER
        WIPE_NOZZLE
        WIPE_STOP
        WIPE_EXIT
      {% endif %}
  
      VEL_POP
  
      # --- restore original target if we changed it in PRE ---
      {% set st = printer["gcode_macro _ACE_STATE"] %}
      {% if st.bumped|int == 1 %}
          { action_respond_info("_ACE_POST_TOOLCHANGE: Set target nozzle temp %s°C" % st.orig_target) }
          SET_HEATER_TEMPERATURE HEATER=extruder TARGET={st.orig_target|int}
          # Optional cooldown wait:
          # TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={st.orig_target|int}
      {% endif %}
  
      RESTORE_GCODE_STATE NAME=TOOLCHANGE MOVE=1 MOVE_SPEED=200
  
      G92 E0
      {action_respond_info("Finish Toolchange")}
  {% else %}
          {action_respond_info("WARNING: ACE is disabled, but Toolchange macro was called!")}
  {% endif %}


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                        ; z hop amount
    {% set cut_filament = params.CUT_FILAMENT|default(0)|int %}   ; 0/1
    {% set standby = params.STANDBY|default(0)|int %}             ; 0=keep temp, 1=drop ~20°C

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}

        M400                         ; flush planner so no path segment gets skipped
        BASE_PAUSE                   ; Klipper captures state/position here

        ; --- Park at your throw position with contained velocity changes ---
        VEL_PUSH
        SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=2500 VELOCITY=200 SQUARE_CORNER_VELOCITY=5

        {% if cut_filament == 1 %}
            {action_respond_info("PAUSE: Cutting filament")}
            CUT_TIP
        {% endif %}

        {action_respond_info("PAUSE: Move to throw position")}
        TO_THROW_POSITION

        VEL_POP

        ; Temperature handling: don't hard power down by default
        {% if standby == 1 and printer['extruder'].target|int > 0 %}
          {% set target = printer['extruder'].target|int %}
          {% set standby_drop = 20 %}
          {% set standby_temp = (target - standby_drop) if (target - standby_drop) > 0 else 0 %}
          M104 S{standby_temp}
        {% endif %}

        ; Long idle so you can resume later
        SET_IDLE_TIMEOUT TIMEOUT=43200
    {% endif %}

    
   
[gcode_macro CANCEL_PRINT]
description: CANCEL_PRINT
rename_existing: CANCEL_PRINT_BASE
gcode:
    {action_respond_info("CANCEL_PRINT, lifting z")}
    G91
    G1 Z3 F600
    G90
    
    {% if printer["output_pin ACE_Pro"].value %}
          _ACE_HANDLE_PRINT_END
    {% else %}
        {action_respond_info("ACE Pro disabled, no CANCEL_PRINT actions.")}
    {% endif %}    
    
    {action_respond_info("Cutting and switching off heaters")}
    SET_VELOCITY_LIMIT ACCEL=20000 ACCEL_TO_DECEL=5000 VELOCITY=300
    G1 E-2 F600
    CUT_TIP
    TO_THROW_POSITION
    G1 E-90 F600
    M104 S0
    M140 S0 ; turn off heatbed
    M106 S0 ; fan off
    CANCEL_PRINT_BASE

[gcode_macro _ACE_STATE]
# state for resume/toolchange
variable_orig_target: 0
variable_bumped: 0
variable_startup_toolchange: 0
variable_active: -1
variable_heating_temperature:0
variable_prev_tool_heating_temperature: 0
gcode:
    # no gcode — just holds variables


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(2.5)|float %}
    {% set client_vel = printer.configfile.settings.pause_resume.recover_velocity|default(50.0) %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        ; Restore standard idle timeout now that we’re resuming
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}

        ; Wrap EVERYTHING we touch so modal F/coords/E-mode can’t leak
        SAVE_GCODE_STATE NAME=RESUME_WRAP

        ; Reheat if needed (uses stored target from PAUSE)
        {% if etemp > 0 %}
            M109 S{etemp|int}
        {% endif %}

        ; Re-activate ACE tool if enabled
        {% if printer["output_pin ACE_Pro"].value %}
          { action_respond_info("(Re)activate Tool") }
          {% set active_tool = printer["gcode_macro _ACE_STATE"].active %}
          {% if active_tool >= 0 %}
            T{active_tool}
          {% endif %}
        {% endif %}

        ; --- Small, safe prime that preserves slicer E-mode like Mainsail ---
        {% set was_abs_e = printer.gcode_move.absolute_extrude %}
        M83
        G1 E5 F300
        G1 E-1 F600
        {% if was_abs_e %} M82 {% endif %}

        RESPOND TYPE=echo MSG="[RESUME]Wipe nozzle"

        ; --- keep wipe/throw side-effects contained ---
        SAVE_GCODE_STATE NAME=RESUME_LOCAL
        VEL_PUSH
        SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=2500 VELOCITY=200 SQUARE_CORNER_VELOCITY=5
        WIPE_ENTER
        WIPE_NOZZLE
        WIPE_STOP
        WIPE_EXIT
        VEL_POP
        RESTORE_GCODE_STATE NAME=RESUME_LOCAL MOVE=0
        ; ---------------------------------------------

        ; Put back every modal we touched before handing control to Klipper
        RESTORE_GCODE_STATE NAME=RESUME_WRAP MOVE=0

        {% if printer["output_pin ACE_Pro"].value %}
          RESPOND TYPE=echo MSG="ACE resume finished"
        {% endif %}

        ; IMPORTANT: Let Klipper return to the exact captured position.
        ; Nothing should move after this line.
        BASE_RESUME VELOCITY={params.VELOCITY|default(client_vel)}
    {% endif %}
