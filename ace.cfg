# Please check that [save_variables] is above [ace] if you're using different config
[save_variables]
filename: ~/printer_data/config/saved_variables.cfg

[respond]

[ace]
#Adapt the serial port to the one your ACE pro is using.
serial: /dev/ttyACM1
baud: 115200

# Extruder_sensor_pin
# The one immediately after the 4-in-1 splitter output (before the toolhead extruder).
extruder_sensor_pin:PB0
# Toolhead_sensor_pin
# Sensor near the hotend entry
# It’s used during loading to confirm the filament has passed through the extruder and reached the hotend side.
toolhead_sensor_pin:nozzle_mcu:PB0

# Default feeding speed, 10-25 in stock
feed_speed: 60
# Default retraction speed, 10-25 in stock
retract_speed: 60
# Length of the retract to make for toolchange
toolchange_retract_length: 70
toolhead_sensor_to_nozzle: 100
toolchange_load_length: 900 # Sensor-switch independed filament feeding length at start of every toolchange

# Park to toolhead hit count, default is 5, can be lowered if your setup works stably on lower values
#park_hit_count: 16
max_dryer_temperature: 55
# Disables feed assist after toolchange. Defaults to true
#disable_assist_after_toolchange: true

incremental_feeding_length: 100 # How much filament to feed incremental after initial 'toolchange_load_length' feeding.
                               # Incremental feeding happend until hotend filaemnt-runoutsensor triggers after a finished increment
incremental_feeding_speed: 60 # Speed for above incremental feeding
extruder_feeding_lenght: 1 # While ACE feeds, extruder should grab the filament when it reaches the printhead, hence it engages at every feeding cycle a little bit to assure that
extruder_feeding_speed: 5 # Extruder feed speed, no need to hurry here.


incremental_retraction_length: 200 # Incremental length which currently loaded filament will be pulled back by ACE until it passes the return-module filament detection switch
                                   # Important is to make it so long that one pull more after triggering is retracting the fillament enough to be pulled out of the 4-in-1 splitter
                                   # to avoid collision with new feeded filament afterwards

incremental_retraction_speed: 60 # Speed at which currently loaded filament will be pulled back incremental by ACE

extruder_retraction_lenght: -50    # How much to retract at the toolhead extruder, once at filament change, to pull out the cut filament out of extruder, so ACE is able to rectract the loaded filament
extruder_retraction_speed: 10       #Speed for above retraction

[gcode_macro VEL_PUSH]
variable_stack: []
gcode:
  {% set cur = printer["gcode_macro VEL_PUSH"].stack %}
  {% set s = cur + [(printer.toolhead.max_accel,
                     (printer.toolhead.max_accel_to_decel|default(printer.toolhead.max_accel, true)),
                     printer.toolhead.max_velocity,
                     printer.toolhead.square_corner_velocity)] %}
  SET_GCODE_VARIABLE MACRO=VEL_PUSH VARIABLE=stack VALUE="{s|tojson}"

[gcode_macro VEL_POP]
gcode:
  {% set cur = printer["gcode_macro VEL_PUSH"].stack %}
  {% if cur|length == 0 %}
    {action_respond_info("VEL_POP: stack empty, nothing to restore")}
  {% else %}
    {% set a, atd, v, scv = cur[-1] %}
    SET_VELOCITY_LIMIT ACCEL={a} ACCEL_TO_DECEL={atd} VELOCITY={v} SQUARE_CORNER_VELOCITY={scv}
    {% set s = cur[:-1] %}
    SET_GCODE_VARIABLE MACRO=VEL_PUSH VARIABLE=stack VALUE="{s|tojson}"
  {% endif %}


[gcode_macro CUT_TIP]
description: Cut filament tip at the front-right cutter (Y jab, soft-limit safe)
# --- Tunables ---
variable_x_impact: 261.0        # cutter X
variable_y_impact: 25.0         # cutter Y (near front)
variable_cruise: 200.0          # mm/s (return)
variable_impact: 18.0           # mm/s (push)
variable_y_stroke: 50.0          # mm to push toward front
variable_repeats: 1
variable_dwell_ms: 80
variable_retract: 50.0
# variable_y_dir: -1.0

gcode:
    RESPOND TYPE=echo MSG="CUTTING..."
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    SAVE_GCODE_STATE NAME=ks1_cut_state

    #Retract a little to reduce oozing
    SAVE_GCODE_STATE NAME=retract_state
    M83
    G92 E0
    G1 E-1 F7000
    G92 E0
    RESTORE_GCODE_STATE NAME=retract_state MOVE=0
    
    # Compute a safe start Y so start_y - y_stroke >= 0 (with a tiny margin)
    {% set safety = 0.5 %}
    {% set start_y = y_impact if y_impact > (y_stroke + safety) else (y_stroke + safety) %}

    M117 Moving to cutter...
    G90
    G1 X{ x_impact } Y{ start_y } F{ cruise*60 }
    M400

    # Y-axis jabs toward front (front is negative Y)
    G91
    {% for i in range(repeats|int) %}
        G1 Y{ -y_stroke } F{ impact*60 }
        G4 P{ dwell_ms }
        G1 Y{ y_stroke } F{ cruise*60 }
    {% endfor %}
    G90
    M400

    FORCE_MOVE STEPPER=extruder DISTANCE=-{ retract } VELOCITY=10

    M117 CUT DONE
    RESPOND TYPE=echo MSG="CUT DONE"
    RESTORE_GCODE_STATE NAME=ks1_cut_state MOVE=1 MOVE_SPEED=200

[gcode_macro _ACE_STATE]
variable_orig_target: 0
variable_bumped: 0
gcode:
    # no gcode — just holds variables

[gcode_macro _ACE_PRE_TOOLCHANGE]
variable_purge_temp_min: 200
gcode:
    {action_respond_info("Doing Pre toolchange")}
    SAVE_GCODE_STATE NAME=TOOLCHANGE

    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G91
    G1 Z2 F100
    M400
    VEL_PUSH
    SET_VELOCITY_LIMIT ACCEL=20000 ACCEL_TO_DECEL=5000 VELOCITY=300
    TO_THROW_POSITION
    VEL_POP        


    # --- record current target before touching it ---
    {% set orig = printer.extruder.target|int %}
    SET_GCODE_VARIABLE MACRO=_ACE_STATE VARIABLE=orig_target VALUE={orig}

    {% set bumped = 1 if orig < purge_temp_min else 0 %}
    SET_GCODE_VARIABLE MACRO=_ACE_STATE VARIABLE=bumped VALUE={bumped}

    # --- heat logic ---
    {% if printer.extruder.temperature < purge_temp_min %}
        {% if bumped %}
            M109 S{purge_temp_min}                # raise target, wait
        {% else %}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}   # just wait
        {% endif %}
    {% endif %}

    {action_respond_info("_ACE_PRE_TOOLCHANGE finished")}



[gcode_macro _ACE_POST_TOOLCHANGE]
gcode:
    {action_respond_info("Doing Post toolchange")}
    VEL_PUSH
    SET_VELOCITY_LIMIT ACCEL=20000 ACCEL_TO_DECEL=5000 VELOCITY=300
    TO_THROW_POSITION

    RESPOND TYPE=echo MSG="Prime nozzle by fixed amount"
    #Purge filament into poop bucket
    SAVE_GCODE_STATE NAME=purge_state
    M83
    G92 E0
    G1  E50 F400
    G1  E40 F800
    G92 E0
    RESTORE_GCODE_STATE NAME=purge_state MOVE=0
    
    RESPOND TYPE=echo MSG="Wipe nozzle after purge"
    
    TO_FRONT_OF_THROW_BLADE
    TO_BACK_OF_THROW_BLADE
    TO_FRONT_OF_THROW_BLADE
    TO_BACK_OF_THROW_BLADE
  
    WIPE_ENTER
    WIPE_NOZZLE
    WIPE_STOP
    WIPE_EXIT
    
    G91
    G1 Z2 F100
    M400
    G90
    VEL_POP

    # --- restore original target if we changed it in PRE ---
    {% set st = printer["gcode_macro _ACE_STATE"] %}
    {% if st.bumped|int == 1 %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={st.orig_target|int}
        # Optional cooldown wait:
        # TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={st.orig_target|int}
    {% endif %}

    RESTORE_GCODE_STATE NAME=TOOLCHANGE MOVE=1 MOVE_SPEED=200
    G92 E0
    {action_respond_info("Finish Toolchange")}


[gcode_macro _ACE_ON_EMPTY_ERROR]
gcode:
    {action_respond_info("Spool is empty")}
    {% if printer.idle_timeout.state == "Printing" %}
        PAUSE
    {% endif %}


[gcode_macro TR]
gcode:
    ACE_CHANGE_TOOL TOOL=-1

[gcode_macro T0]
gcode:
    ACE_CHANGE_TOOL TOOL=0

[gcode_macro T1]
gcode:
    ACE_CHANGE_TOOL TOOL=1

[gcode_macro T2]
gcode:
    ACE_CHANGE_TOOL TOOL=2

[gcode_macro T3]
gcode:
    ACE_CHANGE_TOOL TOOL=3

